server:
  forward-headers-strategy: framework  # ALB HTTPS 헤더 인식

spring:
  application:
    name: user-service
  config:
    import: optional:file:.env[.properties]

  datasource:
    url: ${SPRING_DATASOURCE_URL}?useSSL=false&autoReconnect=true&failOverReadOnly=false&maxReconnects=10&socketTimeout=90000&connectTimeout=90000&useUnicode=true&characterEncoding=UTF-8
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      connection-timeout: 90000
      idle-timeout: 120000
      max-lifetime: 300000
      keepalive-time: 60000
      maximum-pool-size: 6
      minimum-idle: 2
      validation-timeout: 15000
      leak-detection-threshold: 60000
      connection-test-query: "SELECT 1"
      auto-commit: false
      test-on-borrow: true
      test-while-idle: true

  data:
    mongodb:
      read:
        uri: ${SPRING_DATA_MONGODB_READ_URI}&connectTimeoutMS=20000&socketTimeoutMS=60000&serverSelectionTimeoutMS=10000&maxIdleTimeMS=60000

    redis:
      cluster:
        nodes: ${REDIS_CLUSTER_NODES}
      lettuce:
        pool:
          max-active: 12
          max-idle: 6
          min-idle: 2
          max-wait: 3s
          time-between-eviction-runs: 30s
        shutdown-timeout: 1s
      repositories:
        enabled: false

  jpa:
    database: mysql
    hibernate:
      ddl-auto: update
    show-sql: false
    open-in-view: false
    properties:
      hibernate.format_sql: false
      hibernate.show_sql: false
      hibernate.jdbc.time_zone: Asia/Seoul
      hibernate.jdbc.batch_size: 15
      hibernate.order_inserts: true
      hibernate.order_updates: true
      hibernate.jdbc.batch_versioned_data: true
      hibernate.cache.use_second_level_cache: false
      hibernate.cache.use_query_cache: false
      hibernate.generate_statistics: false
      hibernate.jdbc.fetch_size: 30
      hibernate.default_batch_fetch_size: 12
      hibernate.connection.acquisition_timeout: 90000
      hibernate.connection.validation_timeout: 15000

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: ${KAKAO_REDIRECT_URI}
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - phone_number
              - gender
              - birthday
              - birthyear
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: ${NAVER_REDIRECT_URI}
            authorization-grant-type: authorization_code
            client-name: Naver
            scope:
              - mobile
              - gender
              - birthyear
              - birthday
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  jwt:
    secret: ${JWT_SECRET}

cloud:
  aws:
    credentials:
      access-key: ${STORAGE_ACCESS_KEY}
      secret-key: ${STORAGE_SECRET_KEY}
    s3:
      bucket: ${BUCKET_NAME}
      endpoint: ${BUCKET_ENDPOINT}

management:
  health:
    redis:
      enabled: false
    datasource:
      enabled: true

  endpoints:
    web:
      exposure:
        include:
          - health
          - info
          - prometheus

  endpoint:
    health:
      show-details: when-authorized

app:
  frontend:
    success-redirect-uri: ${FRONT_SUCCESS_REDIRECT_URI}
    success-redirect-uri2: ${FRONT_SUCCESS_REDIRECT_URI2}
    fail-redirect-uri: ${FRONT_FAIL_REDIRECT_URI}

resilience4j:
  circuitbreaker:
    configs:
      default:
        failure-rate-threshold: 60
        slow-call-rate-threshold: 70
        slow-call-duration-threshold: 10s
        permitted-number-of-calls-in-half-open-state: 3
        max-wait-duration-in-half-open-state: 0s
        sliding-window-type: COUNT_BASED
        sliding-window-size: 8
        minimum-number-of-calls: 5
        wait-duration-in-open-state: 10s
      redis-config:
        failure-rate-threshold: 50
        slow-call-duration-threshold: 3s
        minimum-number-of-calls: 3
        wait-duration-in-open-state: 5s
      mongodb-config:
        failure-rate-threshold: 70
        slow-call-duration-threshold: 15s
        minimum-number-of-calls: 3
        wait-duration-in-open-state: 15s
    instances:
      circuit:
        base-config: default
      redis:
        base-config: redis-config
      mongodb:
        base-config: mongodb-config

  retry:
    configs:
      default:
        max-attempts: 5
        wait-duration: 1s
        exponential-backoff-multiplier: 2.0
        retry-exceptions:
          - java.sql.SQLException
          - com.mysql.cj.jdbc.exceptions.CommunicationsException
          - java.net.SocketTimeoutException
          - java.net.ConnectException
          - org.springframework.dao.TransientDataAccessException
      redis-config:
        max-attempts: 4
        wait-duration: 600ms
        exponential-backoff-multiplier: 1.5
        retry-exceptions:
          - java.net.SocketTimeoutException
          - java.net.ConnectException
          - io.lettuce.core.RedisException
      mongodb-config:
        max-attempts: 4
        wait-duration: 800ms
        exponential-backoff-multiplier: 1.5
        retry-exceptions:
          - java.net.SocketTimeoutException
          - com.mongodb.MongoException
    instances:
      database:
        base-config: default
      redis:
        base-config: redis-config
      mongodb:
        base-config: mongodb-config

  bulkhead:
    configs:
      default:
        max-concurrent-calls: 12
        max-wait-duration: 3s
    instances:
      database:
        base-config: default
        max-concurrent-calls: 6
      redis:
        max-concurrent-calls: 15
      mongodb:
        max-concurrent-calls: 8
      external-api:
        max-concurrent-calls: 10

  timelimiter:
    configs:
      default:
        timeout-duration: 15s
      database-config:
        timeout-duration: 60s
      cache-config:
        timeout-duration: 3s
    instances:
      database:
        base-config: database-config
      redis:
        base-config: cache-config
      mongodb:
        base-config: database-config
      feign:
        base-config: default

sentry:
  dsn: ${SENTRY_REPOSITORY_DSN}
  environment: ${SENTRY_ENVIRONMENT}
  servername: ${SENTRY_SERVERNAME}
  repository-uri: ${SENTRY_REPOSITORY_URI}

logging:
  config: classpath:logback-spring.xml
  level:
    com.zaxxer.hikari: WARN
    org.hibernate.engine.jdbc.spi.SqlExceptionHelper: WARN

slack:
  webhook-url: ${SLACK_WEBHOOK_URL}

feign:
  match:
    url: ${FEIGN_MATCH_URL}
  community:
    url: ${FEIGN_COMMUNITY_URL}

cookie:
  secure: true
  sameSite: None
  domain: playus.o-r.kr
