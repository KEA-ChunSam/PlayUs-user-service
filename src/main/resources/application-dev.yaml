server:
  forward-headers-strategy: framework  # ALB HTTPS 헤더 인식

spring:
  application:
    name: user-service

  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  data:
    mongodb:
      read:
        uri: ${SPRING_DATA_MONGODB_READ_URI}

    redis:
      cluster:
        nodes: ${REDIS_CLUSTER_NODES}

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    database: mysql
    properties:
      hibernate:
        format_sql: true
        jdbc:
          time_zone: Asia/Seoul
        show_sql: true
    open-in-view: false

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: ${KAKAO_REDIRECT_URI}
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - phone_number
              - gender
              - birthday
              - birthyear
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: ${NAVER_REDIRECT_URI}
            authorization-grant-type: authorization_code
            client-name: Naver
            scope:
              - mobile
              - gender
              - birthyear
              - birthday
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  jwt:
    secret: ${JWT_SECRET}

cloud:
  aws:
    credentials:
      access-key: ${STORAGE_ACCESS_KEY}
      secret-key: ${STORAGE_SECRET_KEY}
    s3:
      bucket : ${BUCKET_NAME}
      endpoint : ${BUCKET_ENDPOINT}

management:
  endpoints:
    web:
      exposure:
        include:
          - health           # 애플리케이션 상태 확인
          - info
          - prometheus       # 메트릭 데이터 노출
          - metrics          # 메트릭 엔드포인트 추가
          - tracing          # 트레이싱 엔드포인트 추가

  # 트레이싱 설정
  tracing:
    enabled: true
    sampling:
      probability: 1.0  # 개발환경 100% 샘플링

  endpoint:
    health:
      show-details: always  # 모니터링을 위해 상세 정보 표시

  # 메트릭에 기본 태그 추가
  metrics:
    tags:
      application: ${spring.application.name}
      environment: dev

app:
  frontend:
    success-redirect-uri: ${FRONT_SUCCESS_REDIRECT_URI}
    success-redirect-uri2: ${FRONT_SUCCESS_REDIRECT_URI2}
    fail-redirect-uri: ${FRONT_FAIL_REDIRECT_URI}

resilience4j:
  circuitbreaker:
    configs:
      default:
        failure-rate-threshold: 50
        slow-call-rate-threshold: 80
        slow-call-duration-threshold: 10s
        permitted-number-of-calls-in-half-open-state: 3
        max-wait-duration-in-half-open-state: 0s
        sliding-window-type: COUNT_BASED
        sliding-window-size: 10
        minimum-number-of-calls: 10
        wait-duration-in-open-state: 10s
    instances:
      circuit:
        base-config: default

sentry:
  dsn: ${SENTRY_REPOSITORY_DSN}
  environment: ${SENTRY_ENVIRONMENT}
  servername: ${SENTRY_SERVERNAME}
  repository-uri: ${SENTRY_REPOSITORY_URI}

logging:
  config: classpath:logback-spring.xml

slack:
  webhook-url: ${SLACK_WEBHOOK_URL}

feign:
  match:
    url: ${FEIGN_MATCH_URL}
  community:
    url: ${FEIGN_COMMUNITY_URL}

cookie:
  secure: true
  sameSite: None
  domain: playus.o-r.kr
